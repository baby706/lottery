#include "base.h"
#include "user.h"
#include "admin.h"
#include "issue.h"
#include "menu1.h"



//系统负载
void menu6(struct userLink *user_head) {
	while(1) {
		int choose;
		printf("************1. 磁盘负载*************\n");
		printf("************2. CPU负载**************\n");
		printf("************3. 内存负载*************\n");
		printf("************4. 返回*****************\n");

		scanf("%d", &choose);
		while(getchar()!='\n');
		switch(choose) {
			case 1:
				system("hdparm -i /dev/hda");
				break;

			case 2:
				system("cat /proc/cpuinf");
				break;

			case 3:
				system(" free -m  ");
				break;

			case 4:
				return;
			default:
				printf("输入错误，请重试\n");
				break;
		}
	}
}

//彩票管理
void menu5(struct lotteryLink *lottery_head,struct purchaseLink *purchase_head) {
	while(1) {
		int choose;
		printf("************1. 发行彩票*************\n");
		printf("************2. 购买记录*************\n");
		printf("************3. 发行记录*************\n");
		printf("************4. 返回*****************\n");

		scanf("%d", &choose);
		while(getchar()!='\n');
		switch(choose) {
			case 1:
				issue_lottery(lottery_head);
				
				break;

			case 2:printf_purchase(purchase_head);
				break;

			case 3:
				printf_lottery(lottery_head);
				break;

			case 4:
				return;
			default:
				printf("输入错误，请重试\n");
				break;
		}
	}
}

//管理员用户管理菜单
void menu4(struct userLink *user_head) {
	while(1) {
		int choose;
		printf("************1. 查看用户*************\n");
		printf("************2. 删除用户*************\n");
		printf("************3. 用户充值*************\n");
		printf("************4. 返回*****************\n");

		scanf("%d", &choose);
		while(getchar()!='\n');
		switch(choose) {
			case 1:
				printf_list(user_head);
				break;

			case 2:delete_user(user_head);
				break;

			case 3:
				charge(user_head);				
				break;

			case 4:
				return;
			default:
				printf("输入错误，请重试\n");
				break;
		}
	}
}
//公证员菜单

void menu7(struct lotteryLink *lottery_head)
{
	
	while(1) {
		int choose;
		printf("************1. 公证细则*************\n");
		printf("************2. 马上开奖*************\n");
		printf("************3. 返回*****************\n");

		scanf("%d", &choose);
		while(getchar()!='\n');
		switch(choose) {
			case 1:
				system("cat 公证细则.txt");
				break;

			case 2:printf_lottery(lottery_head);
				break;
			case 3:
				return 1;
			default:
				printf("输入错误，请重试\n");
				break;
		}
}

}
//管理员主菜单
int menu3(struct userLink *user_head,struct lotteryLink *lottery_head,struct purchaseLink *purchase_head) {

	while(1) {
		int choose;
		printf("************1. 用户管理*************\n");
		printf("************2. 彩票管理*************\n");
		printf("************3. 系统负载*************\n");
		printf("************4. 返回*****************\n");

		scanf("%d", &choose);
		while(getchar()!='\n');
		switch(choose) {
			case 1:
				menu4(user_head);
				break;

			case 2:
				menu5(lottery_head,purchase_head);
				break;

			case 3:
				menu6(user_head);
				break;

			case 4:
				return 1;;
			default:
				printf("输入错误，请重试\n");
				break;
		}
		
	}
}

//用户主菜单
void menu2(struct userLink *user_head, char *name,struct purchaseLink * purchase_head,struct lotteryLink *lottery_head) 
{
	while(1) {
		int choose;
		printf("************1. 查看信息************\n");
		printf("************2. 修改密码************\n");
		printf("************3. 购买彩票************\n");
		printf("************4. 查询中奖************\n");
		printf("************5. 返回************\n");
		
		scanf("%d", &choose);
		while(getchar()!='\n');
		switch(choose)
		{
			case 1:
				{
					struct userLink *pre = select_list(user_head, name);
					if(pre != NULL) {
						printf("name:%s\t",pre->next->data.name);
						printf("passwd:%s\t",pre->next->data.passwd);
						printf("balance:%.2f\n",pre->next->data.balance);
					}
				}						 				
				break;
				
			case 2:{

					struct userLink *pre = select_list(user_head, name);
					if(pre != NULL) {

						char old_passwd[20] = "";
						printf("请输入旧密码：");
						scanf("%s",old_passwd);
						if(strlen(old_passwd) == 0)
						{
							printf("密码不能为空!\n");
							break;
						}
							
			
						if(strcmp(pre->next->data.passwd,old_passwd)!=0)
						{
							printf("密码错误\n");
							break;
						}
						
						char new_passwd[20] = "";							
						printf("请输入新密码：");
						scanf("%s", new_passwd);
						if(strlen(new_passwd) == 0)
						{
							printf("密码不能为空!\n");
							break;
						}
						strcpy(pre->next->data.passwd, new_passwd);
						printf("密码修改成功!\n");
					}
				}
				break;
			
			case 3:
				purchase_ticket(name,purchase_head);
				break;
			case 4:
				check_ticket( name,purchase_head,lottery_head);
				break;
			case 5:
				return ;
			default:
				printf("输入错误，请重试\n");
				break;
		}
	}
}

//顶级菜单
void menu1(struct userLink *user_head, struct lotteryLink *lottery_head, struct purchaseLink* purchase_head)
{
	while(1) {
		int choose,a;
		printf("*********************1. 登录***************\n");
		printf("*********************2. 注册***************\n");
		//printf("*********************3. 管理员登录*********\n");
		//printf("*********************4. 公证员登录*********\n");
		printf("*********************3. 退出***************\n");
	
		scanf("%d", &choose);
		while(getchar()!='\n');
 		switch(choose) 
		{
			case 1:
				{
					if(user_head->next == NULL) {
				
						printf("没有用户记录，请先注册\n");
						break;
					}
					char name[20];
					a = login(user_head,name,lottery_head,purchase_head);
						if(a)
							break ;
					if(strcmp(name, "") != 0) {
						menu2(user_head, name, purchase_head,lottery_head);
					}
				}
				break;
			case 2:
				add_user(user_head);
				save(user_head);
				break;
			/*case 3:
				{
					printf("请输入管理员用户名和密码登录:\n");
					char adminu[20], adminp[20];
					scanf("%s %s", adminu,adminp);
					if(strcmp(adminu,"") == 0 || strcmp(adminp, "") == 0) {
						printf("输入错误，请重新输入!\n");
						break;
					}
					
					if(strcmp(adminu,"admin") == 0 && strcmp(adminp,"admin") ==0) {
						printf("管理员登录成功!\n");
						menu3(user_head,lottery_head,purchase_head);
					} 
					else
						printf("用户名或密码输入错误!");
				}
				break;
			case 4:
				{
					printf("请输入公证员用户名和密码登录:\n");
					char adminu[20], adminp[20];
					scanf("%s %s", adminu,adminp);
					if(strcmp(adminu,"") == 0 || strcmp(adminp, "") == 0) {
						printf("输入错误，请重新输入!\n");
						break;
					}
					
					if(strcmp(adminu,"gzy") == 0 && strcmp(adminp,"gzy") ==0) {
						printf("公证员登录成功!\n");
						menu7(lottery_head);
					} 
					else
						printf("用户名或密码输入错误!");
				}
				break;*/
			case 3:
				exit(1);
				break;
			default:
				printf("输入错误，请重试\n");
				break;
		}  
	}
}
